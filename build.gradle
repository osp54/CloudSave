import fr.xpdustry.toxopid.spec.ModPlatform

plugins {
    id("java")
    id("fr.xpdustry.toxopid") version "3.0.0"
}

version '1.0'

targetCompatibility = 8
sourceCompatibility = JavaVersion.VERSION_16

repositories {
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
}

ext {
    // The build number that this mod is made for
    mindustryVersion = 'v144.1'
    jabelVersion = "93fde537c7"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

toxopid {
    compileVersion.set(mindustryVersion)
    runtimeVersion.set(mindustryVersion)
    platforms.add(ModPlatform.DESKTOP)
}

// Java 8 backwards compatibility flag
allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

dependencies {
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.MindustryJitpack:core:$mindustryVersion"

    implementation "com.google.code.gson:gson:2.10.1"
    implementation "com.squareup.okhttp3:okhttp:4.10.0"
    // implementation 'org.apache.httpcomponents:httpclient:4.5.14'

    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
}

// Force arc version
configurations.configureEach {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'com.github.Anuken.Arc') {
            details.useVersion "$mindustryVersion"
        }
    }
}

tasks.register('jarAndroid') {
    dependsOn "jar"

    doLast {
        if (!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.")

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

        if (!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        // Collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

        // Dex and desugar files - this requires d8 in your PATH
        "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    archiveFileName = "${project.archivesBaseName}Desktop.jar"

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include "mod.hjson"
    }

    from("assets/") {
        include "**"
    }
}

tasks.register('deploy', Jar) {
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from { [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast {
        delete {
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}

tasks.runMindustryClient {
    mods.setFrom(tasks.jar)
}